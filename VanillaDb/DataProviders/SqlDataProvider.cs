// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VanillaDb.DataProviders
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using VanillaDb;
    using VanillaDb.Models;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlDataProvider : SqlDataProviderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <copyright file=\"");
            
            #line 9 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(@".cs"" company=""MMF Software Developers Inc."">
// Copyright (c) MMF Software Developers Inc.. All rights reserved.
// </copyright>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace ");
            
            #line 20 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(@"Service.DataProviders
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Threading.Tasks;
    using log4net;
    using log4net.Extensions;

    /// <summary>SQL implementation of data provider interface for ");
            
            #line 31 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data.</summary>\r\n    /// <seealso cref=\"");
            
            #line 32 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("Service.DataProviders.I");
            
            #line 32 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataProvider\" />\r\n    public partial class ");
            
            #line 33 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(" : I");
            
            #line 33 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataProvider\r\n    {\r\n        private static readonly ILog Log = LogManager.GetLog" +
                    "ger(typeof(");
            
            #line 35 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write("));\r\n\r\n        /// <summary>Initializes a new instance of the <see cref=\"");
            
            #line 37 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write("\"/> class.</summary>\r\n        /// <param name=\"connectionString\">The connection s" +
                    "tring.</param>\r\n        public ");
            
            #line 39 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(@"(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        /// <summary>Gets or sets the connection string.</summary>
        /// <value>The connection string.</value>
        private string ConnectionString { get; set; }

");
            
            #line 48 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

    // Generate the GetBy-Index and GetBy-Index-Bulk methods for each index
    foreach (IndexModel index in Indexes)
    {

            
            #line default
            #line hidden
            this.Write("        /// <summary>Gets the data for the ");
            
            #line 53 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" with the given ");
            
            #line 53 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.ReadableFields()));
            
            #line default
            #line hidden
            this.Write(".</summary>\r\n        ");
            
            #line 54 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetByIndexParamsXmlComments()));
            
            #line default
            #line hidden
            this.Write("\r\n        /// <returns>");
            
            #line 55 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model or null if not found</returns>\r\n        public async Task<");
            
            #line 56 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetByIndexReturnType()));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 56 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetByIndexMethodName()));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 56 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetByIndexMethodParams()));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            Log.TraceBegin();\r\n");
            
            #line 59 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

        foreach (FieldModel field in index.Fields.Where(f => !f.IsNullable))
        {
            if (field.FieldType.FieldType == typeof(string))
            {

            
            #line default
            #line hidden
            this.Write("            if (string.IsNullOrWhiteSpace(");
            
            #line 65 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                throw new ArgumentNullException(nameof(");
            
            #line 67 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("));\r\n            }\r\n\r\n");
            
            #line 70 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            }

            
            #line default
            #line hidden
            
            #line 73 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            if (field.IsIdentity && field.FieldType.FieldType == typeof(int))
            {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 77 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(" < 1)\r\n            {\r\n                throw new InvalidOperationException($\"{");
            
            #line 79 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("} is not a valid ");
            
            #line 79 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\");\r\n            }\r\n\r\n");
            
            #line 82 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("            var ");
            
            #line 86 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data = new List<");
            
            #line 86 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel>();\r\n            using (var connection = new SqlConnection(this.Connect" +
                    "ionString))\r\n            {\r\n                var procName = \"");
            
            #line 89 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexStoredProcName(index)));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;
                    ");
            
            #line 95 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexAddParametersCode(index.Fields)));
            
            #line default
            #line hidden
            this.Write(@"

                    connection.Open();
                    var reader = await command.ExecuteReaderAsync();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            var data = Parse");
            
            #line 103 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel(reader);\r\n                            ");
            
            #line 104 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.Add(data);\r\n                        }\r\n                    }\r\n              " +
                    "  }\r\n            }\r\n\r\n            Log.TraceEnd();\r\n");
            
            #line 111 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            if (index.IsUnique)
            {

            
            #line default
            #line hidden
            this.Write("            return ");
            
            #line 115 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.FirstOrDefault();\r\n");
            
            #line 116 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("            return ");
            
            #line 121 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data;\r\n");
            
            #line 122 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            }

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        /// <summary>Gets the data for the ");
            
            #line 127 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("(s) with the given collection of ");
            
            #line 127 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.ReadableFields()));
            
            #line default
            #line hidden
            this.Write(".</summary>\r\n        ");
            
            #line 128 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.BulkGetByIndexParamsXmlComments()));
            
            #line default
            #line hidden
            this.Write("\r\n        /// <returns>");
            
            #line 129 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model or null if not found.</returns>\r\n        public async Task<IEnumerabl" +
                    "e<");
            
            #line 130 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel>> ");
            
            #line 130 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetByIndexMethodName()));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 130 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.BulkGetByIndexMethodParams()));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            Log.TraceBegin();\r\n");
            
            #line 133 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

        foreach (FieldModel field in index.Fields)
        {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 137 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("s == null || !");
            
            #line 137 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("s.Any())\r\n            {\r\n                throw new ArgumentNullException(nameof(");
            
            #line 139 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("s));\r\n            }\r\n\r\n");
            
            #line 142 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

        }

            
            #line default
            #line hidden
            this.Write("            // Create an in-memory datatable with all of the field values\r\n      " +
                    "      var idDataTable = new DataTable();\r\n            ");
            
            #line 147 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateInMemoryDataColumns(index.Fields)));
            
            #line default
            #line hidden
            this.Write("\r\n            for (var i = 0; i < ");
            
            #line 148 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.Fields.ElementAt(0).FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("s.Count(); i++)\r\n            {\r\n                ");
            
            #line 150 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateInMemoryRowCreation(index.Fields)));
            
            #line default
            #line hidden
            this.Write("\r\n            }\r\n\r\n            var ");
            
            #line 153 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data = new List<");
            
            #line 153 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel>();\r\n            using (var connection = new SqlConnection(this.Connect" +
                    "ionString))\r\n            {\r\n                var procName = \"");
            
            #line 156 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexBulkStoredProcName(index)));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;

                    // Create the Stored Procedure Parameter and set to Type_IdTable
                    var idsParam = command.Parameters.AddWithValue(""");
            
            #line 164 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateBulkProcParameter(index)));
            
            #line default
            #line hidden
            this.Write("\", idDataTable);\r\n                    idsParam.SqlDbType = SqlDbType.Structured;\r" +
                    "\n                    idsParam.TypeName = \"");
            
            #line 166 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetBulkTypeIdTable()));
            
            #line default
            #line hidden
            this.Write(@""";

                    connection.Open();
                    var reader = await command.ExecuteReaderAsync();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            var data = Parse");
            
            #line 174 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel(reader);\r\n                            ");
            
            #line 175 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.Add(data);\r\n                        }\r\n                    }\r\n              " +
                    "  }\r\n            }\r\n\r\n            Log.TraceEnd();\r\n            return ");
            
            #line 182 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data;\r\n        }\r\n\r\n");
            
            #line 185 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

    }

            
            #line default
            #line hidden
            this.Write("        /// <summary>Inserts the given ");
            
            #line 188 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data model into the ");
            
            #line 188 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" table.</summary>\r\n        /// <param name=\"");
            
            #line 189 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data\">The ");
            
            #line 189 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordLower));
            
            #line default
            #line hidden
            this.Write(" data to insert.</param>\r\n        /// <returns>The ID of the inserted ");
            
            #line 190 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" record.</returns>\r\n        public async Task<int> Insert(");
            
            #line 191 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel ");
            
            #line 191 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data)\r\n        {\r\n            Log.TraceBegin();\r\n            if (");
            
            #line 194 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data == null)\r\n            {\r\n                throw new ArgumentNullException(nam" +
                    "eof(");
            
            #line 196 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write(@"Data));
            }

            if (string.IsNullOrWhiteSpace(this.ConnectionString))
            {
                throw new InvalidOperationException(""Connection String is null.  Insert operation cannot be performed."");
            }

            if (");
            
            #line 204 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.");
            
            #line 204 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" > 0)\r\n            {\r\n                throw new InvalidOperationException(\"Unable" +
                    " to insert ");
            
            #line 206 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data that already has a ");
            
            #line 206 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(".\");\r\n            }\r\n\r\n            var ");
            
            #line 209 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(" = -1;\r\n            using (var connection = new SqlConnection(this.ConnectionStri" +
                    "ng))\r\n            {\r\n                var procName = \"");
            
            #line 212 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.GetInsertProcName()));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;
                    ");
            
            #line 218 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateInsertProcParams()));
            
            #line default
            #line hidden
            this.Write(@"

                    connection.Open();
                    var reader = await command.ExecuteReaderAsync();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            ");
            
            #line 226 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(" = (int)reader[\"");
            
            #line 226 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write("\"];\r\n                        }\r\n                    }\r\n                }\r\n       " +
                    "     }\r\n\r\n            Log.TraceEnd();\r\n            return ");
            
            #line 233 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(";\r\n        }\r\n\r\n        /// <summary>Updates the given ");
            
            #line 236 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data model in the ");
            
            #line 236 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" table.</summary>\r\n        /// <param name=\"");
            
            #line 237 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data\">The ");
            
            #line 237 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordLower));
            
            #line default
            #line hidden
            this.Write(" data to update.</param>\r\n        /// <returns>The number of records affected by " +
                    "the update.</returns>\r\n        public async Task<int> Update(");
            
            #line 239 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel ");
            
            #line 239 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data)\r\n        {\r\n            Log.TraceBegin();\r\n            if (");
            
            #line 242 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data == null)\r\n            {\r\n                throw new ArgumentNullException(nam" +
                    "eof(");
            
            #line 244 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write(@"Data));
            }

            if (string.IsNullOrWhiteSpace(this.ConnectionString))
            {
                throw new InvalidOperationException(""Connection String is null.  Insert operation cannot be performed."");
            }

            if (");
            
            #line 252 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.");
            
            #line 252 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" <= 0)\r\n            {\r\n                throw new InvalidOperationException(\"A val" +
                    "id ");
            
            #line 254 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" must be provided to update.\");\r\n            }\r\n\r\n            var affectedRows = " +
                    "0;\r\n            using (var connection = new SqlConnection(this.ConnectionString)" +
                    ")\r\n            {\r\n                var procName = \"");
            
            #line 260 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.GetUpdateProcName()));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;
                    ");
            
            #line 266 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateUpdateProcParams()));
            
            #line default
            #line hidden
            this.Write(@"

                    connection.Open();
                    affectedRows = await command.ExecuteNonQueryAsync();
                }
            }

            Log.TraceEnd();
            return affectedRows;
        }

        /// <summary>Deletes record with the given ");
            
            #line 277 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" from the ");
            
            #line 277 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.TableName));
            
            #line default
            #line hidden
            this.Write(" table.</summary>\r\n        /// <param name=\"");
            
            #line 278 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("\">The ");
            
            #line 278 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(".</param>\r\n        public async Task<int> Delete(int ");
            
            #line 279 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            Log.TraceBegin();\r\n            if (");
            
            #line 282 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(" <= 0)\r\n            {\r\n                throw new InvalidOperationException(\"A val" +
                    "id ");
            
            #line 284 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" must be provided to delete.\");\r\n            }\r\n\r\n            var affectedRows = " +
                    "0;\r\n            using (var connection = new SqlConnection(this.ConnectionString)" +
                    ")\r\n            {\r\n                var procName = \"");
            
            #line 290 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.GetDeleteProcName()));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;
                    command.Parameters.AddWithValue(""");
            
            #line 296 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetParamName()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 296 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write(@");

                    connection.Open();
                    affectedRows = await command.ExecuteNonQueryAsync();
                }
            }

            Log.TraceEnd();
            return affectedRows;
        }

        /// <summary>Deletes the records with the given ");
            
            #line 307 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write("s from the ");
            
            #line 307 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.TableName));
            
            #line default
            #line hidden
            this.Write(" table.</summary>\r\n        /// <param name=\"");
            
            #line 308 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s\">The ");
            
            #line 308 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write("s.</param>\r\n        public async Task<int> Delete(IEnumerable<int> ");
            
            #line 309 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s)\r\n        {\r\n            Log.TraceBegin();\r\n            if (");
            
            #line 312 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s == null)\r\n            {\r\n                throw new ArgumentNullException(nameof" +
                    "(");
            
            #line 314 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s));\r\n            }\r\n\r\n            if (!");
            
            #line 317 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s.Any())\r\n            {\r\n                throw new ArgumentException(\"At least on" +
                    "e ");
            
            #line 319 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write(" must be provided to delete.\", nameof(");
            
            #line 319 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s));\r\n            }\r\n\r\n            if (");
            
            #line 322 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s.Any(i => i <= 0))\r\n            {\r\n                throw new InvalidOperationExc" +
                    "eption(\"All ");
            
            #line 324 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write("s must be valid to delete.\");\r\n            }\r\n\r\n            // Create an in-memor" +
                    "y datatable with the primary key values\r\n            var idDataTable = new DataT" +
                    "able();\r\n            idDataTable.Columns.Add(new DataColumn(\"");
            
            #line 329 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.FieldName));
            
            #line default
            #line hidden
            this.Write("\"));\r\n            for (var i = 0; i < ");
            
            #line 330 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s.Count(); i++)\r\n            {\r\n                idDataTable.Rows.Add(");
            
            #line 332 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetCodeParamName()));
            
            #line default
            #line hidden
            this.Write("s.ElementAt(i));\r\n            }\r\n\r\n            var affectedRows = 0;\r\n           " +
                    " using (var connection = new SqlConnection(this.ConnectionString))\r\n            " +
                    "{\r\n                var procName = \"");
            
            #line 338 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Table.GetDeleteBulkProcName()));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var command = new SqlCommand(procName))
                {
                    Log.InfoFormat(""Invoking Stored Procedure {0}."", procName);
                    command.CommandType = CommandType.StoredProcedure;
                    command.Connection = connection;

                    // Create the Stored Procedure Parameter and set to the Type table
                    var idsParam = command.Parameters.AddWithValue(""");
            
            #line 346 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.GetParamName()));
            
            #line default
            #line hidden
            this.Write("s\", idDataTable);\r\n                    idsParam.SqlDbType = SqlDbType.Structured;" +
                    "\r\n                    idsParam.TypeName = \"");
            
            #line 348 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKeyIndex.GetBulkTypeIdTable()));
            
            #line default
            #line hidden
            this.Write(@""";

                    connection.Open();
                    affectedRows = await command.ExecuteNonQueryAsync();
                }
            }

            Log.TraceEnd();
            return affectedRows;
        }

        /// <summary>Parses the ");
            
            #line 359 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data model out of the reader.</summary>\r\n        /// <param name=\"reader\">The re" +
                    "ader.</param>\r\n        /// <returns>Populated ");
            
            #line 361 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model</returns>\r\n        private ");
            
            #line 362 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel Parse");
            
            #line 362 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel(IDataReader reader)\r\n        {\r\n            var data = new ");
            
            #line 364 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel();\r\n            ");
            
            #line 365 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateReadFields()));
            
            #line default
            #line hidden
            this.Write("\r\n            return data;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlDataProviderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
