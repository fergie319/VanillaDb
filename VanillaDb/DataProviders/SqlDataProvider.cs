// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VanillaDb.DataProviders
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using VanillaDb;
    using VanillaDb.Models;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlDataProvider : SqlDataProviderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <copyright file=\"");
            
            #line 9 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(".cs\" company=\"MMF Software Developers Inc.\">\r\n// Copyright (c) MMF Software Devel" +
                    "opers Inc.. All rights reserved.\r\n// </copyright>\r\n\r\nnamespace ");
            
            #line 13 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("Service.DataProviders\r\n{\r\n    using System;\r\n    using System.Collections.Generic" +
                    ";\r\n    using System.Data;\r\n    using System.Data.SqlClient;\r\n    using System.Li" +
                    "nq;\r\n\r\n    /// <summary>SQL implementation of data provider interface for ");
            
            #line 21 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data.</summary>\r\n    /// <seealso cref=\"");
            
            #line 22 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("Service.DataProviders.I");
            
            #line 22 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataProvider\" />\r\n    public partial class ");
            
            #line 23 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(" : I");
            
            #line 23 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataProvider\r\n    {\r\n        /// <summary>Initializes a new instance of the <see " +
                    "cref=\"");
            
            #line 25 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write("\"/> class.</summary>\r\n        /// <param name=\"connectionString\">The connection s" +
                    "tring.</param>\r\n        public ");
            
            #line 27 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateName()));
            
            #line default
            #line hidden
            this.Write(@"(string connectionString) // TODO: Add Logger and log statements
        {
            this.ConnectionString = connectionString;
        }

        /// <summary>Gets or sets the connection string.</summary>
        /// <value>The connection string.</value>
        private string ConnectionString { get; set; }

");
            
            #line 36 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

    // Generate the GetBy-Index and GetBy-Index-Bulk methods for each index
    foreach (IndexModel index in Indexes)
    {

            
            #line default
            #line hidden
            this.Write("        /// <summary>Gets the data for the ");
            
            #line 41 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" with the given ");
            
            #line 41 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadableFields(index.Fields)));
            
            #line default
            #line hidden
            this.Write(".</summary>\r\n        ");
            
            #line 42 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexParamsXmlComments(index.Fields)));
            
            #line default
            #line hidden
            this.Write("\r\n        /// <returns>");
            
            #line 43 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model or null if not found</returns>\r\n        public ");
            
            #line 44 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel ");
            
            #line 44 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexMethodName(index.Fields)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 44 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexMethodParams(index.Fields)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 46 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

        foreach (FieldModel field in index.Fields)
        {

            
            #line default
            #line hidden
            this.Write("            if (string.IsNullOrWhiteSpace(");
            
            #line 50 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("))\r\n            {\r\n                throw new ArgumentNullException(nameof(");
            
            #line 52 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("));\r\n            }\r\n");
            
            #line 54 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

        }

            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 58 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel ");
            
            #line 58 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data = null;\r\n            using (var connection = new SqlConnection(this.Connecti" +
                    "onString))\r\n            {\r\n                using (var command = new SqlCommand(\"" +
                    "");
            
            #line 61 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexStoredProcName(index)));
            
            #line default
            #line hidden
            this.Write("\"))\r\n                {\r\n                    command.CommandType = CommandType.Sto" +
                    "redProcedure;\r\n                    command.Connection = connection;\r\n           " +
                    "         ");
            
            #line 65 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexAddParametersCode(index.Fields)));
            
            #line default
            #line hidden
            this.Write(@"

                    connection.Open();
                    var reader = command.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            bookData = Parse");
            
            #line 73 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel(reader);\r\n                        }\r\n                    }\r\n           " +
                    "     }\r\n            }\r\n\r\n            return ");
            
            #line 79 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data;\r\n        }\r\n\r\n        ");
            
            #line 82 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

            // Hey Future Matt!  It's-a-me, Past Matt.  You are probably here trying to
            // figure out how to add Get-By-Index-Bulk support for a multi-field index.
            // I just thought I'd let you know that you need to generate a custom type or
            // make use of Tuples (yuck!) to do this.  Then a user would pass in an enumerable
            // of these objects all with unique pairings of the fields in the index.
        
            
            #line default
            #line hidden
            this.Write("        /// <summary>Gets the data for the ");
            
            #line 89 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("(s) with the given collection of ");
            
            #line 89 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReadableFields(index.Fields)));
            
            #line default
            #line hidden
            this.Write(".</summary>\r\n        ");
            
            #line 90 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexBulkParamsXmlComments(index.Fields)));
            
            #line default
            #line hidden
            this.Write("\r\n        /// <returns>");
            
            #line 91 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model or null if not found.</returns>\r\n        public IEnumerable<");
            
            #line 92 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel> ");
            
            #line 92 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexMethodName(index.Fields)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 92 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateGetByIndexBulkMethodParams(index.Fields)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            if (asin10s == null || !asin10s.Any())\r\n            {\r\n" +
                    "                throw new ArgumentNullException(nameof(asin10s));\r\n            }" +
                    "\r\n\r\n            // Create an in-memory datatable with all of the BookIds\r\n      " +
                    "      var idDataTable = new DataTable();\r\n            idDataTable.Columns.Add(ne" +
                    "w DataColumn(\"ASIN10\", typeof(string)));\r\n            foreach (var bookId in asi" +
                    "n10s)\r\n            {\r\n                idDataTable.Rows.Add(bookId);\r\n           " +
                    " }\r\n\r\n            var bookData = new List<BookDataModel>();\r\n            using (" +
                    "var connection = new SqlConnection(this.ConnectionString))\r\n            {\r\n     " +
                    "           using (var command = new SqlCommand(\"USP_Book_GetByASIN10_Multiple\"))" +
                    "\r\n                {\r\n                    command.CommandType = CommandType.Store" +
                    "dProcedure;\r\n                    command.Connection = connection;\r\n\r\n           " +
                    "         // Create the Stored Procedure Parameter and set to Type_IdTable\r\n     " +
                    "               var idsParam = command.Parameters.AddWithValue(\"@asin10s\", idData" +
                    "Table);\r\n                    idsParam.SqlDbType = SqlDbType.Structured;\r\n       " +
                    "             idsParam.TypeName = \"dbo.Type_ASIN10_Table\";\r\n\r\n                   " +
                    " connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n" +
                    "                    if (reader.HasRows)\r\n                    {\r\n                " +
                    "        while (reader.Read())\r\n                        {\r\n                      " +
                    "      var data = ParseBookDataModel(reader);\r\n                            bookDa" +
                    "ta.Add(data);\r\n                        }\r\n                    }\r\n               " +
                    " }\r\n            }\r\n\r\n            return bookData;\r\n        }\r\n\r\n");
            
            #line 136 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>Inserts the given ");
            
            #line 140 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data model into the ");
            
            #line 140 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" table.</summary>\r\n        /// <param name=\"");
            
            #line 141 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data\">The ");
            
            #line 141 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordLower));
            
            #line default
            #line hidden
            this.Write(" data to insert.</param>\r\n        /// <returns>The ID of the inserted ");
            
            #line 142 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" record.</returns>\r\n        public int Insert(");
            
            #line 143 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel ");
            
            #line 143 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data)\r\n        {\r\n            if (");
            
            #line 145 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data == null)\r\n            {\r\n                throw new ArgumentNullException(nam" +
                    "eof(");
            
            #line 147 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write(@"Data));
            }

            if (string.IsNullOrWhiteSpace(this.ConnectionString))
            {
                throw new InvalidOperationException(""Connection String is null.  Insert operation cannot be performed."");
            }

            if (");
            
            #line 155 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RecordCamel));
            
            #line default
            #line hidden
            this.Write("Data.");
            
            #line 155 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey));
            
            #line default
            #line hidden
            this.Write(" > 0)\r\n            {\r\n                throw new InvalidOperationException(\"Unable" +
                    " to insert ");
            
            #line 157 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data that already has a ");
            
            #line 157 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey));
            
            #line default
            #line hidden
            this.Write(".\");\r\n            }\r\n\r\n            var ");
            
            #line 160 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(" = -1;\r\n            using (var connection = new SqlConnection(this.ConnectionStri" +
                    "ng))\r\n            {\r\n                using (var command = new SqlCommand(\"");
            
            #line 163 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateInsertProcName()));
            
            #line default
            #line hidden
            this.Write("\"))\r\n                {\r\n                    command.CommandType = CommandType.Sto" +
                    "redProcedure;\r\n                    command.Connection = connection;\r\n           " +
                    "         ");
            
            #line 167 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateInsertProcParams()));
            
            #line default
            #line hidden
            this.Write(@"

                    connection.Open();
                    var reader = command.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            ");
            
            #line 175 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(" = (int)reader[\"");
            
            #line 175 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey));
            
            #line default
            #line hidden
            this.Write("\"];\r\n                        }\r\n                    }\r\n                }\r\n       " +
                    "     }\r\n\r\n            return ");
            
            #line 181 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrimaryKey.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(";\r\n        }\r\n\r\n        /// <summary>Parses the ");
            
            #line 184 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" data model out of the reader.</summary>\r\n        /// <param name=\"reader\">The re" +
                    "ader.</param>\r\n        /// <returns>Populated ");
            
            #line 186 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write(" Data Model</returns>\r\n        private ");
            
            #line 187 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel Parse");
            
            #line 187 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel(IDataReader reader)\r\n        {\r\n            var data = new ");
            
            #line 189 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Record));
            
            #line default
            #line hidden
            this.Write("DataModel();\r\n            ");
            
            #line 190 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerateReadFields()));
            
            #line default
            #line hidden
            this.Write("\r\n            return data;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlDataProviderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
