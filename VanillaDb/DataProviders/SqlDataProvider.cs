// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VanillaDb.DataProviders
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git-scratch\vanilladb\VanillaDb\DataProviders\SqlDataProvider.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SqlDataProvider : SqlDataProviderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <copyright file=\"BookSqlDataProvider.cs\" company=\"MMF Software Developers Inc." +
                    "\">\r\n// Copyright (c) MMF Software Developers Inc.. All rights reserved.\r\n// </co" +
                    "pyright>\r\n\r\nnamespace BookService.DataProviders\r\n{\r\n    using System;\r\n    using" +
                    " System.Collections.Generic;\r\n    using System.Data;\r\n    using System.Data.SqlC" +
                    "lient;\r\n    using System.Linq;\r\n\r\n    /// <summary>Database interface implementa" +
                    "tion for Book data</summary>\r\n    /// <seealso cref=\"BookService.DataProviders.I" +
                    "BookDataProvider\" />\r\n    public partial class BookSqlDataProvider : IBookDataPr" +
                    "ovider\r\n    {\r\n        /// <summary>Initializes a new instance of the <see cref=" +
                    "\"BookSqlDataProvider\"/> class.</summary>\r\n        /// <param name=\"connectionStr" +
                    "ing\">The connection string.</param>\r\n        public BookSqlDataProvider(string c" +
                    "onnectionString)\r\n        {\r\n            this.ConnectionString = connectionStrin" +
                    "g;\r\n        }\r\n\r\n        /// <summary>Gets or sets the connection string.</summa" +
                    "ry>\r\n        /// <value>The connection string.</value>\r\n        private string C" +
                    "onnectionString { get; set; }\r\n\r\n        /// <summary>Gets the data for the book" +
                    " with the given BookId.</summary>\r\n        /// <param name=\"bookId\">The book Id." +
                    "</param>\r\n        /// <returns>Book Data Model or null if not found.</returns>\r\n" +
                    "        /// <exception cref=\"InvalidOperationException\">${bookId} is not a valid" +
                    " BookId.</exception>\r\n        public BookDataModel GetByBookId(int bookId)\r\n    " +
                    "    {\r\n            if (bookId < 1)\r\n            {\r\n                throw new Inv" +
                    "alidOperationException($\"${bookId} is not a valid BookId.\");\r\n            }\r\n\r\n " +
                    "           BookDataModel bookData = null;\r\n            using (var connection = n" +
                    "ew SqlConnection(this.ConnectionString))\r\n            {\r\n                using (" +
                    "var command = new SqlCommand(\"USP_Book_GetByBookId\"))\r\n                {\r\n      " +
                    "              command.CommandType = CommandType.StoredProcedure;\r\n              " +
                    "      command.Connection = connection;\r\n                    command.Parameters.A" +
                    "ddWithValue(\"@bookId\", bookId);\r\n\r\n                    connection.Open();\r\n     " +
                    "               var reader = command.ExecuteReader();\r\n                    if (re" +
                    "ader.HasRows)\r\n                    {\r\n                        while (reader.Read" +
                    "())\r\n                        {\r\n                            bookData = ParseBook" +
                    "DataModel(reader);\r\n                        }\r\n                    }\r\n          " +
                    "      }\r\n            }\r\n\r\n            return bookData;\r\n        }\r\n\r\n        ///" +
                    " <summary>Gets the data for the book with the given BookId.</summary>\r\n        /" +
                    "// <param name=\"bookIds\">The book Ids.</param>\r\n        /// <returns>Book Data M" +
                    "odel or null if not found.</returns>\r\n        /// <exception cref=\"System.Argume" +
                    "ntNullException\">bookIds</exception>\r\n        public IEnumerable<BookDataModel> " +
                    "GetByBookId(IEnumerable<int> bookIds)\r\n        {\r\n            if (bookIds == nul" +
                    "l || !bookIds.Any())\r\n            {\r\n                throw new ArgumentNullExcep" +
                    "tion(nameof(bookIds));\r\n            }\r\n\r\n            // Create an in-memory data" +
                    "table with all of the BookIds\r\n            var idDataTable = new DataTable();\r\n " +
                    "           idDataTable.Columns.Add(new DataColumn(\"BookId\", typeof(int)));\r\n    " +
                    "        foreach (var bookId in bookIds)\r\n            {\r\n                idDataTa" +
                    "ble.Rows.Add(bookId);\r\n            }\r\n\r\n            var bookData = new List<Book" +
                    "DataModel>();\r\n            using (var connection = new SqlConnection(this.Connec" +
                    "tionString))\r\n            {\r\n                using (var command = new SqlCommand" +
                    "(\"USP_Book_GetByBookId_Multiple\"))\r\n                {\r\n                    comma" +
                    "nd.CommandType = CommandType.StoredProcedure;\r\n                    command.Conne" +
                    "ction = connection;\r\n\r\n                    // Create the Stored Procedure Parame" +
                    "ter and set to Type_IdTable\r\n                    var idsParam = command.Paramete" +
                    "rs.AddWithValue(\"@bookIds\", idDataTable);\r\n                    idsParam.SqlDbTyp" +
                    "e = SqlDbType.Structured;\r\n                    idsParam.TypeName = \"dbo.Type_Boo" +
                    "kId_Table\";\r\n\r\n                    connection.Open();\r\n                    var r" +
                    "eader = command.ExecuteReader();\r\n                    if (reader.HasRows)\r\n     " +
                    "               {\r\n                        while (reader.Read())\r\n               " +
                    "         {\r\n                            var data = ParseBookDataModel(reader);\r\n" +
                    "                            bookData.Add(data);\r\n                        }\r\n    " +
                    "                }\r\n                }\r\n            }\r\n\r\n            return bookDa" +
                    "ta;\r\n        }\r\n\r\n        /// <summary>Gets the data for the book with the given" +
                    " ISBN13.</summary>\r\n        /// <param name=\"isbn13\">The isbn13 value.</param>\r\n" +
                    "        /// <returns>Book Data Model or null if not found</returns>\r\n        ///" +
                    " <exception cref=\"System.ArgumentNullException\">isbn13</exception>\r\n        publ" +
                    "ic BookDataModel GetByISBN13(string isbn13)\r\n        {\r\n            if (string.I" +
                    "sNullOrWhiteSpace(isbn13))\r\n            {\r\n                throw new ArgumentNul" +
                    "lException(nameof(isbn13));\r\n            }\r\n\r\n            BookDataModel bookData" +
                    " = null;\r\n            using (var connection = new SqlConnection(this.ConnectionS" +
                    "tring))\r\n            {\r\n                using (var command = new SqlCommand(\"USP" +
                    "_Book_GetByISBN13\"))\r\n                {\r\n                    command.CommandType" +
                    " = CommandType.StoredProcedure;\r\n                    command.Connection = connec" +
                    "tion;\r\n                    command.Parameters.AddWithValue(\"@isbn13\", isbn13);\r\n" +
                    "\r\n                    connection.Open();\r\n                    var reader = comma" +
                    "nd.ExecuteReader();\r\n                    if (reader.HasRows)\r\n                  " +
                    "  {\r\n                        while (reader.Read())\r\n                        {\r\n " +
                    "                           bookData = ParseBookDataModel(reader);\r\n             " +
                    "           }\r\n                    }\r\n                }\r\n            }\r\n\r\n       " +
                    "     return bookData;\r\n        }\r\n\r\n        /// <summary>Gets the data for the b" +
                    "ook with the given ISBN13.</summary>\r\n        /// <param name=\"isbn13s\">The isbn" +
                    "13 values.</param>\r\n        /// <returns>Book Data Model or null if not found.</" +
                    "returns>\r\n        /// <exception cref=\"System.ArgumentNullException\">isbn13s</ex" +
                    "ception>\r\n        public IEnumerable<BookDataModel> GetByISBN13(IEnumerable<stri" +
                    "ng> isbn13s)\r\n        {\r\n            if (isbn13s == null || !isbn13s.Any())\r\n   " +
                    "         {\r\n                throw new ArgumentNullException(nameof(isbn13s));\r\n " +
                    "           }\r\n\r\n            // Create an in-memory datatable with all of the Boo" +
                    "kIds\r\n            var idDataTable = new DataTable();\r\n            idDataTable.Co" +
                    "lumns.Add(new DataColumn(\"ISBN13\", typeof(string)));\r\n            foreach (var b" +
                    "ookId in isbn13s)\r\n            {\r\n                idDataTable.Rows.Add(bookId);\r" +
                    "\n            }\r\n\r\n            var bookData = new List<BookDataModel>();\r\n       " +
                    "     using (var connection = new SqlConnection(this.ConnectionString))\r\n        " +
                    "    {\r\n                using (var command = new SqlCommand(\"USP_Book_GetByISBN13" +
                    "_Multiple\"))\r\n                {\r\n                    command.CommandType = Comma" +
                    "ndType.StoredProcedure;\r\n                    command.Connection = connection;\r\n\r" +
                    "\n                    // Create the Stored Procedure Parameter and set to Type_Id" +
                    "Table\r\n                    var idsParam = command.Parameters.AddWithValue(\"@isbn" +
                    "13s\", idDataTable);\r\n                    idsParam.SqlDbType = SqlDbType.Structur" +
                    "ed;\r\n                    idsParam.TypeName = \"dbo.Type_ISBN13_Table\";\r\n\r\n       " +
                    "             connection.Open();\r\n                    var reader = command.Execut" +
                    "eReader();\r\n                    if (reader.HasRows)\r\n                    {\r\n    " +
                    "                    while (reader.Read())\r\n                        {\r\n          " +
                    "                  var data = ParseBookDataModel(reader);\r\n                      " +
                    "      bookData.Add(data);\r\n                        }\r\n                    }\r\n   " +
                    "             }\r\n            }\r\n\r\n            return bookData;\r\n        }\r\n\r\n    " +
                    "    /// <summary>Gets the data for the book with the given ASIN10.</summary>\r\n  " +
                    "      /// <param name=\"asin10\">The asin10 value.</param>\r\n        /// <returns>B" +
                    "ook Data Model or null if not found</returns>\r\n        public BookDataModel GetB" +
                    "yASIN10(string asin10)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(asi" +
                    "n10))\r\n            {\r\n                throw new ArgumentNullException(nameof(asi" +
                    "n10));\r\n            }\r\n\r\n            BookDataModel bookData = null;\r\n           " +
                    " using (var connection = new SqlConnection(this.ConnectionString))\r\n            " +
                    "{\r\n                using (var command = new SqlCommand(\"USP_Book_GetByASIN10\"))\r" +
                    "\n                {\r\n                    command.CommandType = CommandType.Stored" +
                    "Procedure;\r\n                    command.Connection = connection;\r\n              " +
                    "      command.Parameters.AddWithValue(\"@asin10\", asin10);\r\n\r\n                   " +
                    " connection.Open();\r\n                    var reader = command.ExecuteReader();\r\n" +
                    "                    if (reader.HasRows)\r\n                    {\r\n                " +
                    "        while (reader.Read())\r\n                        {\r\n                      " +
                    "      bookData = ParseBookDataModel(reader);\r\n                        }\r\n       " +
                    "             }\r\n                }\r\n            }\r\n\r\n            return bookData;" +
                    "\r\n        }\r\n\r\n        /// <summary>Gets the data for the book with the given AS" +
                    "IN10.</summary>\r\n        /// <param name=\"asin10s\">The asin10 values.</param>\r\n " +
                    "       /// <returns>Book Data Model or null if not found.</returns>\r\n        ///" +
                    " <exception cref=\"System.ArgumentNullException\">asin</exception>\r\n        public" +
                    " IEnumerable<BookDataModel> GetByASIN10(IEnumerable<string> asin10s)\r\n        {\r" +
                    "\n            if (asin10s == null || !asin10s.Any())\r\n            {\r\n            " +
                    "    throw new ArgumentNullException(nameof(asin10s));\r\n            }\r\n\r\n        " +
                    "    // Create an in-memory datatable with all of the BookIds\r\n            var id" +
                    "DataTable = new DataTable();\r\n            idDataTable.Columns.Add(new DataColumn" +
                    "(\"ASIN10\", typeof(string)));\r\n            foreach (var bookId in asin10s)\r\n     " +
                    "       {\r\n                idDataTable.Rows.Add(bookId);\r\n            }\r\n\r\n      " +
                    "      var bookData = new List<BookDataModel>();\r\n            using (var connecti" +
                    "on = new SqlConnection(this.ConnectionString))\r\n            {\r\n                u" +
                    "sing (var command = new SqlCommand(\"USP_Book_GetByASIN10_Multiple\"))\r\n          " +
                    "      {\r\n                    command.CommandType = CommandType.StoredProcedure;\r" +
                    "\n                    command.Connection = connection;\r\n\r\n                    // " +
                    "Create the Stored Procedure Parameter and set to Type_IdTable\r\n                 " +
                    "   var idsParam = command.Parameters.AddWithValue(\"@asin10s\", idDataTable);\r\n   " +
                    "                 idsParam.SqlDbType = SqlDbType.Structured;\r\n                   " +
                    " idsParam.TypeName = \"dbo.Type_ASIN10_Table\";\r\n\r\n                    connection." +
                    "Open();\r\n                    var reader = command.ExecuteReader();\r\n            " +
                    "        if (reader.HasRows)\r\n                    {\r\n                        whil" +
                    "e (reader.Read())\r\n                        {\r\n                            var da" +
                    "ta = ParseBookDataModel(reader);\r\n                            bookData.Add(data)" +
                    ";\r\n                        }\r\n                    }\r\n                }\r\n        " +
                    "    }\r\n\r\n            return bookData;\r\n        }\r\n\r\n        /// <summary>Inserts" +
                    " the given Book data model into the book table.</summary>\r\n        /// <param na" +
                    "me=\"bookData\">The book data to insert.</param>\r\n        /// <returns>The ID of t" +
                    "he inserted Book record.</returns>\r\n        public int Insert(BookDataModel book" +
                    "Data)\r\n        {\r\n            if (bookData == null)\r\n            {\r\n            " +
                    "    throw new ArgumentNullException(nameof(bookData));\r\n            }\r\n\r\n       " +
                    "     if (string.IsNullOrWhiteSpace(this.ConnectionString))\r\n            {\r\n     " +
                    "           throw new InvalidOperationException(\"Connection String is null.  Inse" +
                    "rt operation cannot be performed.\");\r\n            }\r\n\r\n            if (bookData." +
                    "BookId > 0)\r\n            {\r\n                throw new InvalidOperationException(" +
                    "\"Unable to insert Book Data that already has a BookId.\");\r\n            }\r\n\r\n    " +
                    "        var bookId = -1;\r\n            using (var connection = new SqlConnection(" +
                    "this.ConnectionString))\r\n            {\r\n                using (var command = new" +
                    " SqlCommand(\"USP_Book_Insert\"))\r\n                {\r\n                    command." +
                    "CommandType = CommandType.StoredProcedure;\r\n                    command.Connecti" +
                    "on = connection;\r\n                    command.Parameters.AddWithValue(\"@isbn10\"," +
                    " bookData.ISBN10 ?? (object)DBNull.Value);\r\n                    command.Paramete" +
                    "rs.AddWithValue(\"@isbn13\", bookData.ISBN13 ?? (object)DBNull.Value);\r\n          " +
                    "          command.Parameters.AddWithValue(\"@asin10\", bookData.ASIN10 ?? (object)" +
                    "DBNull.Value);\r\n\r\n                    connection.Open();\r\n                    va" +
                    "r reader = command.ExecuteReader();\r\n                    if (reader.HasRows)\r\n  " +
                    "                  {\r\n                        while (reader.Read())\r\n            " +
                    "            {\r\n                            bookId = (int)reader[\"BookId\"];\r\n    " +
                    "                    }\r\n                    }\r\n                }\r\n            }\r\n" +
                    "\r\n            return bookId;\r\n        }\r\n\r\n        /// <summary>Parses the book " +
                    "data model out of the reader.</summary>\r\n        /// <param name=\"reader\">The re" +
                    "ader.</param>\r\n        /// <returns>Populated Book Data Model</returns>\r\n       " +
                    " private BookDataModel ParseBookDataModel(IDataReader reader)\r\n        {\r\n      " +
                    "      var data = new BookDataModel();\r\n            data.BookId = (int)reader[\"Bo" +
                    "okId\"];\r\n            data.ISBN10 = reader[\"ISBN10\"] != DBNull.Value ? (string)re" +
                    "ader[\"ISBN10\"] : string.Empty;\r\n            data.ISBN13 = reader[\"ISBN13\"] != DB" +
                    "Null.Value ? (string)reader[\"ISBN13\"] : string.Empty;\r\n            data.ASIN10 =" +
                    " reader[\"ASIN10\"] != DBNull.Value ? (string)reader[\"ASIN10\"] : string.Empty;\r\n  " +
                    "          return data;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SqlDataProviderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
